import database as dbmodule
import os
import Numeric

"""
Data generated by this module can be displayied by using gnulplot:

% gnuplot
gnuplot> set contour surface
gnuplot> set pm3d
gnuplot> unset surface
gnuplot> splot "/tmp/kdepim/generations/largest" with lines
"""

# SQL code for creating a view with the commits by commiter by period
#  (being the period a quarter)
viewCreate = """
create or replace
view generations (period, commiter_id, commits)
as select year(date_log)*4+quarter(date_log), commiter_id, count(commit_id)
from log
where filetype = 5
group by year(date_log), quarter(date_log), commiter_id
order by year(date_log), quarter(date_log), count(date_log) desc;
"""

class byQuarter:

    connection = None

    def __init__(self, db, dirname):
        # result = db.querySQLRaw ("select from_days((to_days(date_log) div 100)*100) as period, count(*) from log group by period")
        # result = db.querySQLRaw ("drop view generations")
        self.connection = db
        self.dirname = dirname
        
        try:
            result = self.connection.executeSQLRaw (viewCreate)
        except:
            pass

        try:
            os.makedirs (dirname)
        except:
            print dirname + " already exists, not creating"

        # self.commitPerPeriodPerCommiter()
        # self.commitsPerPeriod()
        self.largestCommiters()

    def commitsPerPeriodPerCommiter(self):

        """
        Print lines to a file, each line repesenting:
          period commiter commits
        """
        
        filehand = open(self.dirname + '/' + 'commits_per_period_per_commiter', 'w')
        
        result = self.connection.executeSQLRaw ("select * from generations")
        for row in result:
            # 0:period, 2:commiter, 3:commits
            filehand.write (row[0] + '-' + row[1] + ' ' + row[2] + '\n')


    def commitsPerPeriod(self):

        """
        Print lines to a file, each line representing:
          period commits
        """
        
        filehand = open(self.dirname + '/' + 'commits_per_period', 'w')

        result = self.connection.executeSQLRaw ("select period, sum(commits) from generations group by period;")
        for row in result:
            # 0: period, 1: commits
            filehand.write (row[0] + ' ' + row[1] + '\n') 


    def largestCommiters(self):

        """
        Get, for each quarter, the largest commiter, and trace her
        history (commits in any other quarter)
        """
        
        filehand = open(self.dirname + '/' + 'largest', 'w')

        result = self.connection.executeSQLRaw ("select * from generations")
        firstPeriod = int (result[0][0])
        lastPeriod = int (result[-1][0])
        matrixSize = lastPeriod - firstPeriod + 1
        matrixPeriods = Numeric.zeros((matrixSize,matrixSize))
        currentPeriod = firstPeriod - 1
        for row in result:
            # 0:period, 1:commiter, 2:commits
            period = int (row[0])
            if period > currentPeriod:
                # This row corresponds to the largest commiter in a new period
                currentPeriod = period
                commiter = row[1]
                self.commitsCommiterAllPeriods \
                  (commiter,
                   matrixPeriods[currentPeriod-firstPeriod],
                   firstPeriod)
        for x in range(0,len(matrixPeriods)-1):
            for y in range(0,len(matrixPeriods)-1):
                filehand.write (str(x) + ' ' + str(y) + ' ' + str(matrixPeriods[x,y]) + '\n')
            filehand.write ('\n')


    def commitsCommiterAllPeriods(self, commiter, arrayCommits, first):

        """
        Calculate the number of commits per period, for all periods,
        for a given commiter
        """
        
        # print arrayCommits
        result = self.connection.executeSQLRaw ("select period, sum(commits) from generations where commiter_id=" + str(commiter) + " group by period")
        for row in result:
            # 0:period, 1:commits
            period = int (row[0])
            arrayCommits [period-first] = int(row[1])

