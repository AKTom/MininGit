\input texinfo                @c -*- Texinfo -*-
@c %**start of header

@setfilename cvsanaly.texi
@include version.texi


@settitle GNU @code{CVSAnalY}
@setchapternewpage odd
@c Combine the variable and function indices:
@syncodeindex vr fn
@c Combine the program and concept indices:
@syncodeindex pg cp
@c %**end of header

@copying
This file documents the @code{CVSAnalY} tool, which extracts information
out of source code repository logs and stores it into a database. 

This is Edition @value{EDITION}, last updated @value{UPDATED},
of @cite{The CVSAnalY Manual}, for @code{CVSAnalY} version
@value{VERSION}.

Copyright @copyright{} 2009
LibreSoft

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections.
@end quotation
@end copying

@iftex
@shorttitlepage CVSAnalY
@end iftex
@titlepage
@title CVSAnalY
@subtitle A tool to analyze software repositories.
@subtitle @code{CVSAnalY} Version @value{VERSION}
@subtitle @value{UPDATED-MONTH}
@author Carlos Garcia Campos
@page
@vskip 0pt plus 1filll
@insertcopying
@sp 2
Published by LibreSoft
@end titlepage

@summarycontents
@contents

@ifnottex
@node Top, Overview, (dir), (dir)
@top @code{CVSAnalY}

@insertcopying
@end ifnottex

@menu
* Overview::                        Overview of @code{CVSAnalY}.
* Installation::                    How to install @code{CVSAnalY}.
* Usage::                           Running @code{CVSAnalY}.
* The configuration file::          The @code{CVSAnalY} configuration file.
* Database::                        The design of the database.
* Extensions::                      @code{CVSAnalY} extensions. 
* FAQ::                             Frequently Asked Questions.
* GNU Free Documentation License::  License for copying this manual.
@end menu

@node Overview, Installation, Top, Top
@comment  node-name,  next,  previous,  up
@chapter Overview of @code{CVSAnalY}

The @code{CVSAnalY} tool extracts information out of source code
repository logs and stores it into a database.

@node Installation, Usage, Overview, Top
@chapter How to install @code{CVSAnalY}

@code{CVSAnaly} uses the standard Python Distutils. First of all you
should install all the dependencies. 

@itemize @bullet

@item 
Python MySQLDB: there should be packages for your operating system, so
you should be able to install it as any other software. In Debian
systems the package is @code{python-mysqldb}

@example
@group
# apt-get install python-mysqldb
@end group
@end example

@item
Repository Handler: it's, like @code{CVSAnalY}, part of the LibreSoft
tools
set@footnote{@url{https://forge.morfeo-project.org/projects/libresoft-tools/}}. 
You will probably have to install it from sources. Here is an example
assuming Repository Hanlder 0.2 is used and the tarball has been already
downloaded.

@example
@group
$ tar xvjf repositoryhandler-0.2.tar.bz2
$ cd repositoryhandler-0.2
$ ./configure
$ make
# make install
@end group
@end example

@item 
Python SQLiteDB: it's optional, required only to use SQLite instead
MySQL as database system. It's also usually available in most of the
operating systems. 

@item
Other dependencies (CVS, SVN and Git) are actually optional, although
required depending on the type of repository you want to analyze. It's
recommended to install of them. 

@end itemize

We are now ready to install @code{CVSAnalY}.

@example
@group
$ tar xvzf cvsanaly2-@value{VERSION}.tar.gz
$ cd cvsanaly2-@value{VERSION}
# python setup.py install
@end group
@end example

You can also use @code{CVSAnalY} without installing it, just by running
the @code{cvsanaly} command from the directory sources. 

@example
@group
$ cd cvsanaly2-@value{VERSION}
$ ./cvsanaly2 --help
@end group
@end example

@node Usage, The configuration file, Installation, Top
@chapter Running @code{CVSAnalY}

Once @code{CVSAnalY} is installed you can use it just by running the
executable @command{cvsanaly2}@footnote{It's called cvsanaly2 to avoid conflicts 
with old (incompatible) cvsanaly 1.x)}

@noindent
The syntax to run @command{cvsanaly2} is the following:

@example
cvsanaly2 [options] [URI]
@end example

@noindent
Analyze the given URI. An URI can be a checked out local path directory, 
or a remote URL pointing to a repository. If URI is omitted,
the current working directory will be used as a checked out
directory. The type of the repository will be automatically detected, so
the only information you have to provide about the repository is this 
URI. @code{CVSAnalY} doesn't run checkouts, so if the repository doesn't
support remote retrieving of the log, a checked out directory must be
provided.
The repository log will be parsed and stored in a
database. @code{CVSAnalY} doesn't expect to have all privileges on the
database server, so the database should be created before running
@code{CVSAnalY} or it will fail. This is not relevant if you are using
SQLite since there isn't any server. 

@noindent
Global options:

@itemize @bullet
@item 
-h, --help

Show help information

@item 
-V, --version

Show the version number of @code{CVSAnalY}

@item
-g, --debug

Enable debug mode. It shows useful information for debugging like
the commands that are being executed, the SQL statements, parsing status
and so on. 

@item
-q, --quiet

Run silently, only important error messages is printed. 

@item
--profile

Enable profiling mode. It shows information about how long some tasks
take to run. 

@item
-f, --config-file

Use a custom configuration file. @xref{The configuration file}

@item
-l, --repo-logfile

Use the given log file as the input of the log parser instead of running
the log command for the repository. 

@item
-s, --save-logfile

Save the input log information to the given path.

@item
--extensions

Run the given extensions after the log parsing/storing process. It
expects a comma-separated list with the name of the extensions to
run. Dependencies among extensions are automatically resolved by
@code{CVSAnalY}.

@end itemize

@noindent
Database specific options:

@itemize @bullet
@item
--db-driver

Use the given database system. MySQL (actually @code{mysql}) is the default
(and recommended) option.

@item
-u, --db-user

The name of the user to connect to the database system. The given user
should exist, since @code{CVSAnalY} will not try to create any
user. This option doesn't make sense if you are using SQLite. The
default option is @code{operator}. 

@item
-p, --db-password

The user's password to connect to the database system. If it's not
provided, you will be prompted to enter it. 

@item
-d, --db-database

The name of the database. I should exist, since @code{CVSAnalY} will not
try to create any database. If you are using SQLite, this option might
be a local path instead of just a name. Default option is
@code{cvsanaly}.

@item
-H, --db-hostname

The host name where database system is running. This option doesn't make
sense when using SQLite. Default option is @code{localhost}.
@end itemize

@noindent 
Examples:

@itemize @bullet

@item
Running @code{CVSAnalY} with a CVS repository already checked out using
MySQL driver.

@example
@group
$ cvsanaly2 -u carlos -d gstreamer ~/src/cvs/gstreamer
@end group
@end example

@item
Running @code{CVSAnalY} with a SVN repository using the remote URI and
SQLite as the databse driver


@example
@group
$ cvsanaly2 --db-driver sqlite -d ~/db/nautilus.db \
http://svn.gnome.org/svn/nautilus
@end group
@end example

@end itemize

@node The configuration file, Database, Usage, Top
@chapter The @code{CVSAnalY} configuration file

@node Database, FAQ, The configuration file, Top
@chapter The design of the database

@node FAQ, GNU Free Documentation License, Database, Top
@chapter Frequently Asked Questions

@raisesections
@include fdl.texi
@lowersections

@bye
