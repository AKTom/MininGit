Content Extension
=================

How to run it
-------------
    miningit [miningit options] --extensions=Content [repository URL]

If you want a quick example, you can run `test-content.sh`, which runs against the original miningit repository (how meta) and saves to an SQLite database.

Goal
----
The content extension is designed to get the source of every revision in the SCM repository. For DVCS technologies (like Git) this is trivial, for older technologies (like CVS/SVN) it's not.

With CVS-like repositories, the main repo needs to be queried for each individual check-in and the source downloaded. This plugin does that for you.

While miningit is designed for metrics across the entire repo, you might want to know the source code for certain uses.

Why doesn't miningit do this already?
-------------------------------------
Downloading every snapshot of changed files is expensive in disk space (most DVCS techs have nice compression to deal with this issue), and your database size can blow up from a few megabytes to gigabytes. It also takes a long time to query the SCM this way, although the plugin uses  threading in order to open about 10 concurrent connections to the SCM server in order to alleviate some overhead.

Throttling
----------
This plugin, by default, opens 10 threads to the repository. In testing, this seems like a reasonable value. If your download is going too slow, you can try to increase this number. If you suspect there are a lot of errors (such as the server backing off for fear of a denial of service attack), you can decrease the number.

If you want to edit this value, you can do so by exporting an environment variable called `CVSANALY_THREADS`, with the number of threads you'd like to spawn. For example, in bash, this would be `CVSANALY_THREADS=20;export CVSANALY_THREADS`. Don't forget to **export** the value, or miningit won't be able to see it.



Schema
------
The plugin stores its results in the `content` table.

* `id` (Integer) -> The table primary key, has no significance by itself.
* `scmlog_id` (Integer) -> Foreign key to `scmlog(id)`, which allows you to find the details of the commit when this file was changed.
* `file_id` (Integer) -> Foreign key to `file(id)`. `file` is a table that stores files independently of the file structure, the idea being that if a file is moved, it is still resolvable. Read the original miningit docs for more information.
* `content` (Text) -> The actual source code of the file.
